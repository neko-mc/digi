plugins {
	id 'fabric-loom' version '0.11-SNAPSHOT' apply false
  id "org.cadixdev.licenser" version "0.6.1"
}

subprojects {
  apply plugin: "java"
  apply plugin: "fabric-loom"
	apply plugin: "org.cadixdev.licenser"

  sourceCompatibility = JavaVersion.VERSION_17
  targetCompatibility = JavaVersion.VERSION_17

  version = "$rootProject.minecraft_version-$project.mod_version"
  group = rootProject.maven_group
  archivesBaseName = project.mod_name

  logger.lifecycle("$project.mod_name: $project.mod_version")

	repositories {
    maven { url = "https://maven.terraformersmc.com/releases/" }
    maven { url "https://maven.shedaniel.me" }
	}

	dependencies {
		minecraft "com.mojang:minecraft:$rootProject.minecraft_version"
		mappings "net.fabricmc:yarn:$rootProject.yarn_mappings:v2"
		modApi "net.fabricmc:fabric-loader:$rootProject.loader_version"

    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_version"

    modRuntimeOnly "com.terraformersmc:modmenu:3.0.1"
    modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:7.2.409" 
  }

	jar {
		archiveClassifier.set "dev"
	}

	loom {
		shareCaches()
	}

  processResources {
		inputs.property "mod_id", project.mod_id
		inputs.property "mod_version", project.mod_version
		inputs.property "mod_name", project.mod_name
		inputs.property "mod_desc", project.mod_desc

		inputs.property "dep_java", rootProject.dep_java
		inputs.property "dep_mc", rootProject.dep_mc
		inputs.property "dep_fl",  rootProject.dep_fl

		filesMatching("fabric.mod.json") {
			expand(
        "mod_id": project.mod_id,
        "mod_version": project.mod_version,
        "mod_name": project.mod_name,
        "mod_desc": project.mod_desc,
        "license": "LGPL-3.0",

        "dep_java": rootProject.dep_java,
        "dep_mc": rootProject.dep_mc,
        "dep_fl": rootProject.dep_fl
      )
		}
	}

	license {
		header rootProject.file("HEADER")
		include "**/*.java"
	}

  java {
    withSourcesJar()
  }
}

task licenseFormatAll
subprojects { p -> licenseFormatAll.dependsOn("${p.path}:licenseFormat") }

task copyJars(type: Copy, dependsOn: subprojects.tasks['jar']) {
  from subprojects.collect { it.tasks.withType(Jar) }
  into "$buildDir/libs"
}